
generator client {
  provider = "prisma-client-js"
  output   = "./generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(uuid()) @db.Uuid
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])

  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid()) @db.Uuid
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(uuid()) @db.Uuid
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  transactions  Transaction[]
  connections   Connection[]
  categories    Category[]
  sources       Source[]
  selfSplits    Split[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])

  @@map("verificationTokens")
}

model Transaction {
  id          String    @id @default(uuid()) @db.Uuid
  title       String
  description String?
  amount      Float
  date        DateTime
  type        TransactionType
  category    Category  @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  categoryId  String    @db.Uuid
  source      Source    @relation(fields: [sourceId], references: [id], onDelete: Restrict)
  sourceId    String    @db.Uuid
  splitMethod SplitMethod?
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String    @db.Uuid
  splits      Split[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("transactions")
}

model Connection {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.Uuid
  splits    Split[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("connections")
}

model Split {
  id            String       @id @default(uuid()) @db.Uuid
  transaction   Transaction  @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  transactionId String       @db.Uuid
  connection    Connection?  @relation(fields: [connectionId], references: [id], onDelete: Cascade)
  connectionId  String?      @db.Uuid
  selfUser      User?        @relation(fields: [selfUserId], references: [id], onDelete: Cascade)
  selfUserId    String?      @db.Uuid
  amount        Float?
  percentage    Float?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@map("splits")
}

enum TransactionType {
  INCOME
  EXPENSE
  TRANSFER
}

enum SplitMethod {
  equal
  percentage
  amount
}

model Category {
  id        String   @id @default(uuid()) @db.Uuid
  title     String
  emoji     String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  transactions Transaction[]

  @@map("categories")
}

model Source {
  id           String       @id @default(uuid()) @db.Uuid
  name         String
  type         SourceType
  amount       Float        @default(0)
  creditLimit  Float?
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String       @db.Uuid
  transactions Transaction[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@map("sources")
}

enum SourceType {
  BANK
  CASH
  CREDIT
}
